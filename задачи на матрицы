задание 1 
#include <iostream>
#include <vector>
using namespace std;

// функция сравнения двух матриц
bool m(const vector<vector<int>>& A, const vector<vector<int>>& B) {
    int n = A.size();
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            if (A[i][j] != B[i][j])
                return false;
    return true;
}

// функция вывода матрицы
void ma(const vector<vector<int>>& M) {
    for (auto& row : M) {
        for (int x : row) cout << x << " ";
        cout << "\n";
    }
}

int main() {
    int N;
    cin >> N;

    vector<vector<int>> A(N, vector<int>(N));
    for (int i = 0; i < N; i++)
        for (int j = 0; j < N; j++)
            cin >> A[i][j];

    vector<vector<int>> M1(N, vector<int>(N)); // главная диагональ
    vector<vector<int>> M2(N, vector<int>(N)); // побочная диагональ
    vector<vector<int>> M3(N, vector<int>(N)); // вертикальная ось
    vector<vector<int>> M4(N, vector<int>(N)); // горизонтальная ось

    // 1. Главная диагональ
    for (int i = 0; i < N; i++)
        for (int j = 0; j < N; j++)
            M1[j][i] = A[i][j];

    // 2. Побочная диагональ
    for (int i = 0; i < N; i++)
        for (int j = 0; j < N; j++)
            M2[N-1-j][N-1-i] = A[i][j];

    // 3. Вертикальная ось
    for (int i = 0; i < N; i++)
        for (int j = 0; j < N; j++)
            M3[i][N-1-j] = A[i][j];

    // 4. Горизонтальная ось
    for (int i = 0; i < N; i++)
        for (int j = 0; j < N; j++)
            M4[N-1-i][j] = A[i][j];

    // Вывод матриц
    ma(M1);
    cout << "\n";
    ma(M2);
    cout << "\n";
    ma(M3);
    cout << "\n";
    ma(M4);
    cout << "\n";

    // Проверка совпадений
    bool found = false;
    vector<vector<vector<int>>> mats = {M1, M2, M3, M4};

    for (int i = 0; i < 4; i++) {
        for (int j = i + 1; j < 4; j++) {
            if (m(mats[i], mats[j])) {
                cout << "(" << i + 1 << "," << j + 1 << ")\n";
                found = true;
            }
        }
    }

    if (!found)
        cout << "NONE\n";

    return 0;
}  


задача 2
#include <iostream>
#include <vector>
using namespace std;

int main() {
    int N;
    cin >> N;  // ввод размера матрицы
    vector<vector<int>> A(N, vector<int>(N));

    // ввод элементов матрицы
    for (int i = 0; i < N; ++i)
        for (int j = 0; j < N; ++j)
            cin >> A[i][j];

    // сумма первой строки
    int target = 0;
    for (int j = 0; j < N; ++j) target += A[0][j];

    // проверка остальных строк
    for (int i = 1; i < N; ++i) {
        int sumRow = 0;
        for (int j = 0; j < N; ++j)
        sumRow += A[i][j];
        if (sumRow != target) {
            cout << "NO\n";
            return 0;
        }
    }

    // проверка столбцов
    for (int j = 0; j < N; ++j) {
        int sumCol = 0;
        for (int i = 0; i < N; ++i)
        sumCol += A[i][j];
        if (sumCol != target) {
            cout << "NO\n";
            return 0;
        }
    }

    // проверка диагоналей
    int diag1 = 0, diag2 = 0;
    for (int i = 0; i < N; ++i) {
        diag1 += A[i][i];           // главная диагональ
        diag2 += A[i][N-1-i];       // побочная диагональ
    }

    if (diag1 != target || diag2 != target) {
        cout << "NO\n";
        return 0;
    }

    cout << "YES\n";  // все суммы совпадают
    return 0;
}

задача 3
#include <iostream>
#include <vector>
using namespace std;

int main() {
    int N, M;
    cin >> N >> M;

    vector<vector<int>> A(N, vector<int>(M));
    for (int i = 0; i < N; ++i)
        for (int j = 0; j < M; ++j)
            cin >> A[i][j];

    // массивы для минимальных и максимальных значений строк и столбцов
    vector<int> minRow(N), maxRow(N), minCol(M), maxCol(M);

    for (int i = 0; i < N; ++i) {
        minRow[i] = A[i][0];
        maxRow[i] = A[i][0];
        for (int j = 1; j < M; ++j) {
            if (A[i][j] < minRow[i]) minRow[i] = A[i][j];
            if (A[i][j] > maxRow[i]) maxRow[i] = A[i][j];
        }
    }

    for (int j = 0; j < M; ++j) {
        minCol[j] = A[0][j];
        maxCol[j] = A[0][j];
        for (int i = 1; i < N; ++i) {
            if (A[i][j] < minCol[j]) minCol[j] = A[i][j];
            if (A[i][j] > maxCol[j]) maxCol[j] = A[i][j];
        }
    }

    bool found = false;

    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < M; ++j) {
            // проверка типа A
            if (A[i][j] == minRow[i] && A[i][j] == maxCol[j]) {
                cout << "A " << A[i][j] << " " << i+1 << " " << j+1 << "\n";
                found = true;
            }
            // проверка типа B
            if (A[i][j] == maxRow[i] && A[i][j] == minCol[j]) {
                cout << "B " << A[i][j] << " " << i+1 << " " << j+1 << "\n";
                found = true;
            }
        }
    }

    if (!found) cout << "NONE\n";

    return 0;
}

задача 4 
#include <iostream>
#include <vector>
using namespace std;

int main() {
    int N;
    cin >> N;

    vector<vector<int>> A(N, vector<int>(N, 0));

    int num = 1;
    int top = 0, bottom = N - 1, left = 0, right = N - 1;

    while (num <= N * N) {
        // сверху слева направо
        for (int j = left; j <= right && num <= N*N; ++j)
            A[top][j] = num++;
        top++;

        // справа сверху вниз
        for (int i = top; i <= bottom && num <= N*N; ++i)
            A[i][right] = num++;
        right--;

        // снизу справа налево
        for (int j = right; j >= left && num <= N*N; --j)
            A[bottom][j] = num++;
        bottom--;

        // слева снизу вверх
        for (int i = bottom; i >= top && num <= N*N; --i)
            A[i][left] = num++;
        left++;
    }

    // вывод матрицы
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j)
            cout << A[i][j] << " ";
        cout << "\n";
    }

    return 0;
}
задача 5
#include <iostream>
#include <vector>
using namespace std;

int main() {
    int N, M;
    cin >> N >> M;

    vector<vector<int>> A(N, vector<int>(M));
    for (int i = 0; i < N; ++i)
        for (int j = 0; j < M; ++j)
            cin >> A[i][j];

    int top = 0, bottom = N - 1, left = 0, right = M - 1;

    bool first = true; // для вывода без лишнего пробела в начале

    while (top <= bottom && left <= right) {
        // сверху слева направо
        for (int j = left; j <= right; ++j) {
            if (!first) cout << " ";
            cout << A[top][j];
            first = false;
        }
        top++;

        // справа сверху вниз
        for (int i = top; i <= bottom; ++i) {
            if (!first) cout << " ";
            cout << A[i][right];
            first = false;
        }
        right--;

        // снизу справа налево
        if (top <= bottom) {
            for (int j = right; j >= left; --j) {
                if (!first) cout << " ";
                cout << A[bottom][j];
                first = false;
            }
            bottom--;
        }

        // слева снизу вверх
        if (left <= right) {
            for (int i = bottom; i >= top; --i) {
                if (!first) cout << " ";
                cout << A[i][left];
                first = false;
            }
            left++;
        }
    }

    cout << "\n";
    return 0;
}
 задача 6
 #include <iostream>
using namespace std;

int main() {
    // коэффициенты системы
    double a1 = 2, b1 = 3, c1 = 13;
    double a2 = 5, b2 = -1, c2 = 9;

    // определитель системы
    double det = a1 * b2 - a2 * b1;

    if (det == 0) {
        cout << "Система не имеет единственного решения\n";
        return 0;
    }

    // метод Крамера
    double x = (c1 * b2 - c2 * b1) / det;
    double y = (a1 * c2 - a2 * c1) / det;

    cout << "Решение системы:\n";
    cout << "x = " << x << "\n";
    cout << "y = " << y << "\n";

    return 0;
}
 задача 7 
#include <iostream>
using namespace std;

int main() {
    // коэффициенты системы
    double a1 = 1, b1 = 1, c1 = 1, d1 = 6;
    double a2 = 2, b2 = -1, c2 = 3, d2 = 14;
    double a3 = -1, b3 = 4, c3 = -1, d3 = 2;

    // определитель основной матрицы
    double D = a1*(b2*c3 - b3*c2) - b1*(a2*c3 - a3*c2) + c1*(a2*b3 - a3*b2);

    if (D == 0) {
        cout << "Система не имеет единственного решения\n";
        return 0;
    }

    // определители для x, y, z
    double Dx = d1*(b2*c3 - b3*c2) - b1*(d2*c3 - d3*c2) + c1*(d2*b3 - d3*b2);
    double Dy = a1*(d2*c3 - d3*c2) - d1*(a2*c3 - a3*c2) + c1*(a2*d3 - a3*d2);
    double Dz = a1*(b2*d3 - b3*d2) - b1*(a2*d3 - a3*d2) + d1*(a2*b3 - a3*b2);

    double x = Dx / D;
    double y = Dy / D;
    double z = Dz / D;

    cout << "Решение системы:\n";
    cout << "x = " << x << "\n";
    cout << "y = " << y << "\n";
    cout << "z = " << z << "\n";

    return 0;
}
 задача 8 
#include <iostream>
using namespace std;

int main() {
    // коэффициенты системы
    double a1 = 3, b1 = -1, c1 = 2, d1 = 5;
    double a2 = 2, b2 = 4, c2 = -1, d2 = 6;
    double a3 = 1, b3 = -3, c3 = 1, d3 = 4;

    // определитель основной матрицы
    double D = a1*(b2*c3 - b3*c2) - b1*(a2*c3 - a3*c2) + c1*(a2*b3 - a3*b2);

    if (D == 0) {
        cout << "Система не имеет единственного решения\n";
        return 0;
    }

    // определители для x, y, z
    double Dx = d1*(b2*c3 - b3*c2) - b1*(d2*c3 - d3*c2) + c1*(d2*b3 - d3*b2);
    double Dy = a1*(d2*c3 - d3*c2) - d1*(a2*c3 - a3*c2) + c1*(a2*d3 - a3*d2);
    double Dz = a1*(b2*d3 - b3*d2) - b1*(a2*d3 - a3*d2) + d1*(a2*b3 - a3*b2);

    double x = Dx / D;
    double y = Dy / D;
    double z = Dz / D;

    cout << "Решение системы:\n";
    cout << "x = " << x << "\n";
    cout << "y = " << y << "\n";
    cout << "z = " << z << "\n";

    return 0;
}


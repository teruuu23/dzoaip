задача 1
#include <iostream> 
#include <cmath>
using namespace std;
int main () {
    int n[3][2];
    for (int i = 0; i < 3; i++) {
        cout << "координаты ввести" << i << " (x y) ";
        cin >> n[i][0] >> n[i][1];
    }
    double x1 = n[0][0], y1 = n[0][1];
    double x2 = n[1][0], y2 = n[1][1];
    double x3 = n[2][0], y3 = n[2][1];

    double S = 0.5 * fabs(x1*(y2 - y3) + x2*(y3 - y1) + x3*(y1 - y2));
    cout << "площадь" << S << endl;
    return 0;
}

задача 2
#include <iostream> 
#include <cmath>
using namespace std;
int main () {
    int n[4][2];
    for (int i = 0; i < 4; i++) {
        cout << "координаты ввести" << i << " (x y) ";
        cin >> n[i][0] >> n[i][1];
    }
    int p = 0;
    for (int i = 0; i < 4; i++) {
        int next = (i + 1) % 4; 
        double dx = n[next][0] - n[i][0];
        double dy = n[next][1] - n[i][1];
        p += sqrt(dx*dx + dy*dy);
    }

    cout << "Периметр многоугольника = " << p << endl;
    return 0;
}

задача 3
#include <iostream> 
#include <cmath>
using namespace std;
int main () {
    float n[3][2];
    for(int i = 0; i < 3; i++) {
    cout << "координаты" << i << "(x y)";
    cin >> n[i][0] >> n[i][1];    
    }
    float cx = (n[0][0] + n[0][1] + n[0][2]) / 3;
    float cy = (n[0][1] + n[1][1] + n[2][1]) / 3;
    cout << "коорд центра масс" << cx << "," << cy << endl;

задача 6
int arr[4][2];
    cout << "Введите координаты для 1 отрезка" << endl;
    for (int i = 0; i < 2; ++i) {
        for (int j = 0; j < 2; ++j) {
            if (j == 0) {
                cout << "Введите x для "<<i+1<<" точки: ";
                cin >> arr[i][j];
            }
            if (j == 1) {
                cout << "Введите y для " << i + 1 << " точки: ";
                cin >> arr[i][j];
            }
        }
    }
    cout << "Введите координаты для 2 отрезка" << endl;
    for (int i = 2; i < 4; ++i) {
        for (int j = 0; j < 2; ++j) {
            if (j == 0) {
                cout << "Введите x для " << i + 1 << " точки: ";
                cin >> arr[i][j];
            }
            if (j == 1) {
                cout << "Введите y для " << i + 1 << " точки: ";
                cin >> arr[i][j];
            }
        }
    }
    int s1 = Orientetion(arr[0][0], arr[1][0], arr[2][0], arr[0][1], arr[1][1], arr[2][1]);
    int s2 = Orientetion(arr[0][0], arr[1][0], arr[3][0], arr[0][1], arr[1][1], arr[3][1]);
    if ( s1== s2 and s1!=0) {
        cout << "Отрезки не пересекются" << endl;
    }
    if (s1 != s2 and s1 != 0 and s2!=0) {
        cout << "Отрезки  пересекются" << endl;
    }
    if ((s1 != s2 and s1 == 0) or (s1 != s2 and s2 == 0)) {
        cout << "Отрезки  пересекются" << endl;
    }
    if (s1 == s2 and s1 == 0) {
        cout << "Отрезки коллинеарны" << endl;
    }

    

    
    return 0;
}

задача 4 
#include <iostream> 
#include <cmath>
using namespace std;
int main () {
    int n[4][2];
    for (int i = 0; i < 4; i++) {
        cout << "координаты ввести" << i << " (x y) ";
        cin >> n[i][0] >> n[i][1];
    }
    double dx = n[2][0] - n[0][0];
    double dy = n[2][1] - n[0][1];

    double d = sqrt(dx*dx + dy*dy);
    cout << "длина диагонали" << d << endl;
    return 0;
}

задача 5
int arr[3][2];
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 2; ++j) {
            if (j == 0) {
                cout << "Введите x для " << i + 1 << " точки: ";
                cin >> arr[i][j];
            }
            if (j == 1) {
                cout << "Введите y для " << i + 1 << " точки: ";
                cin >> arr[i][j];
            }
        }
    }
    double p ;
    p = (arr[1][0] - arr[0][0]) * (arr[2][1] - arr[0][1]) - (arr[1][1] - arr[0][1]) * (arr[2][0] - arr[0][0]);
    if (p == 0) {
        cout << "Точки лежат на одной прямой" << endl;
    }
    else{
        cout << "Точки не лежат на одной прямой" << endl;
    }*/
    /

задача 8
int arr[2][2];
    for (int i = 0; i < 2; i++) {
        cout << "Введите координаты " << i + 1 << " точки" << endl;
        for (int j = 0; j < 2; j++) {
            if (j == 0) {
                cout << "Введите x: ";
                cin >> arr[i][j];
            }
            if (j == 1) {
                cout << "Введите y: ";
                cin >> arr[i][j];
            }
        }
    }
    int dx = fabs(arr[0][0] - arr[1][0]);
    int dy = fabs(arr[0][1] - arr[1][1]);
    cout << "Длина отрезка, соединяющего точки: " << sqrt((dx * dx) + (dy * dy)) << endl;*/
    //Задача 7
    /*int** arr;
    int k = 0;
    cout << "Введите кол-во вершин многоугольника: ";
    cin >> k;
    if (k < 3) {
       cout << "Неверный ввод данных! Многоугольник - это фигура, у которой больше 2 вершин ";
    }
    else {
        arr = new int* [k];
        for (int i = 0; i < k; i++) {
            arr[i] = new int[2];
        }
        for (int i = 0; i < k; ++i) {
            for (int j = 0; j < 2; ++j) {
                if (j == 0) {
                    cout << "Введите x для " << i + 1 << " вершины: ";
                    cin >> arr[i][j];
                }
                if (j == 1) {
                    cout << "Введите y для " << i + 1 << " вершины: ";
                    cin >> arr[i][j];
                }
            }
        }

    int x1, y1,x2,y2;
    cout << "Введите координаты точки, у которой мы определяем, где она находится относительно многоугольника" << endl;
    cout << "Введите х: ";
    cin >> x1;
    cout << "Введите y: ";
    cin >>y1;
    x2 = 100 * x1;
    y2 = 100 * y1;
    int s = 0;
    for (int i = 0; i < k-1; i++) {
        int s1 = Orientetion(arr[i][0], arr[i+1][0], x1, arr[i][1], arr[i+1][1], y1);
        int s2 = Orientetion(arr[i][0], arr[i + 1][0], x2, arr[i][1], arr[i + 1][1], y2);
        if (s1 != s2 and s1 != 0 and s2 != 0) {
            s++;
        }
        else if ((s1 != s2 and s1 == 0) or (s1 != s2 and s2 == 0)) {
            s++;
        }
    }
    cout << s << endl;
    if (s %2!=0) {
        cout << "Точка лежит внутри многоугольника" << endl;
    }
    else {
        cout << "Точка не лежит внутри многоугольника" << endl;
    }
    }

задача 9 
int** arr;
    int k = 0;
    cout << "Введите кол-во вершин для 1 многоугольника: ";
    cin >> k;
    if (k < 3) {
        cout << "Неверный ввод данных! Многоугольник - это фигура, у которой больше 2 вершин ";
    }
    else {
        arr = new int* [k];
        for (int i = 0; i < k; i++) {
            arr[i] = new int[2];
        }
        for (int i = 0; i < k; ++i) {
            for (int j = 0; j < 2; ++j) {
                if (j == 0) {
                    cout << "Введите x для " << i + 1 << " вершины: ";
                    cin >> arr[i][j];
                }
                if (j == 1) {
                    cout << "Введите y для " << i + 1 << " вершины: ";
                    cin >> arr[i][j];
                }
            }
        }
    
    int** arr2;
    int k2 = 0;
    cout << "Введите кол-во вершин для 2 многоугольника: ";
    cin >> k2;
    if (k2 < 3) {
        cout << "Неверный ввод данных! Многоугольник - это фигура, у которой больше 2 вершин ";
    }
    else {
        arr2 = new int* [k2];
        for (int i = 0; i < k2; i++) {
            arr2[i] = new int[2];
        }
        for (int i = 0; i < k2; ++i) {
            for (int j = 0; j < 2; ++j) {
                if (j == 0) {
                    cout << "Введите x для " << i + 1 << " вершины: ";
                    cin >> arr2[i][j];
                }
                if (j == 1) {
                    cout << "Введите y для " << i + 1 << " вершины: ";
                    cin >> arr2[i][j];
                }
            }
        }

        for (int i = 0; i < k - 1; i++) {
            for (int j = 0; j < k2 - 1; i++) {
                int s1 = Orientetion(arr[i][0], arr[i + 1][0], arr2[j][0], arr[i][1], arr[i + 1][1], arr2[j][1]);
                int s2 = Orientetion(arr[i][0], arr[i + 1][0], arr2[j + 1][0], arr[i][1], arr[i + 1][1], arr2[j + 1][1]);
                if (s1 != s2 and s1 != 0 and s2 != 0) {
                    cout << "Многоугольники пересекаются" << endl;
                    exit(EXIT_FAILURE);
                }
                else if ((s1 != s2 and s1 == 0) or (s1 != s2 and s2 == 0)) {
                    cout << "Многоугольники пересекаются" << endl;
                    exit(EXIT_FAILURE);
                }
            }
        }
    }
    }
    cout << "Многоугольники не пересекаются" << endl;*/
    return 0;
}



